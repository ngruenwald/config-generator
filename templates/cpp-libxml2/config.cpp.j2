{%- set opt = {} -%}
{%- from "_options.j2" import set_options with context -%}
{{- set_options(opt) -}}
{%- extends "base_config.cpp.j2" -%}

{% block specific_includes %}
#include <memory>
#include <optional>
#include <sstream>
#include <string>

#include <libxml/parser.h>
#include <libxml/tree.h>
#include <libxml/xmlschemas.h>
{%- if opt.use_validate %}

#include "embedded_resources.h"
{%- endif %}
{% endblock %}

{% block specific_code_no_namespace %}
{%- if opt.use_validate %}

static void get_schema_data(
    const char*& buffer,
    size_t& size)
{
    BINARY_RESOURCE_DATA(xsd_data, {{ info.title | default('config') | replace('-', '_') }}, xsd);
    BINARY_RESOURCE_SIZE(xsd_size, {{ info.title | default('config') | replace('-', '_') }}, xsd);

    buffer = reinterpret_cast<const char*>(xsd_data);
    size = xsd_size;
}
{%- endif %}
{% endblock %}

{% block specific_code %}
struct config_options
{
    unsigned long flags{0};
    const char* elementName{"entry"};

    config_options() = default;
    config_options(unsigned long f) : flags{f} {}
    config_options(const char* en) : elementName{en} {}
    config_options(unsigned long f, const char* en) : flags{f}, elementName{en} {}
};

constexpr const unsigned long FLAG_XML_ATTRIBUTE = 0x01;
constexpr const unsigned long FLAG_XML_ELEMENT = 0x02;
constexpr const unsigned long FLAG_XML_WRAPPED = 0x04;

template<typename T>
class LibXml2Deleter
{
public:
    explicit LibXml2Deleter(void(*freeFn)(T*)) : freeFn_{freeFn} {}
    void operator()(T* p) const { freeFn_(p); }
private:
    void(*freeFn_)(T*);
};

struct LibXml2Data
{
    xmlDocPtr doc{nullptr};
    xmlNodePtr node{nullptr};
    xmlChar* prop{nullptr};

    LibXml2Data() {}
    LibXml2Data(xmlNodePtr n) : node{n} {}
    LibXml2Data(xmlChar* p) : prop(p) {}

    ~LibXml2Data()
    {
        if (doc)
        {
            xmlFreeDoc(doc);
        }
        if (prop)
        {
            xmlFree(prop);
        }
    }
};

typedef struct LibXml2Data config_data_t;

inline config_data_t load_file(
    const std::string& filepath)
{
    auto data = config_data_t{};
    data.doc = xmlReadFile(filepath.c_str(), nullptr, 0);
    if (!data.doc)
    {
        throw std::runtime_error("failed to to load XML file");
    }
    data.node = xmlDocGetRootElement(data.doc);
    if (!data.node)
    {
        xmlFreeDoc(data.doc);
        throw std::runtime_error("empty file");
    }
    return data;
}
{% if opt.use_validate %}
static void xml_error_handler(
    void* userData,
    const xmlError* error)
{
    auto* errors = reinterpret_cast<std::vector<std::string>*>(userData);
    if (!errors)
    {
        return;
    }
    std::ostringstream os;
    switch (error->level)
    {
        case XML_ERR_WARNING: os << "WARN: ";  break;
        case XML_ERR_ERROR:   os << "ERROR: "; break;
        case XML_ERR_FATAL:   os << "FATAL: "; break;
        case XML_ERR_NONE: return;
        default: return;
    }
    os << error->file << "," << error->line << ": " << error->message;
    errors->push_back(os.str());
};

inline void validate(
    const config_data_t& data)
{
    xmlDocPtr doc{nullptr};
    xmlSchemaParserCtxtPtr parserCtx{nullptr};
    xmlSchemaPtr schema{nullptr};
    xmlSchemaValidCtxtPtr validCtx{nullptr};

    try
    {
        constexpr const char* name{"{{ info.title | default('config') | replace('-', '_') }}.xsd"};

        const char* buffer{nullptr};
        size_t size{0};

        get_schema_data(buffer, size);

        doc = xmlReadMemory(buffer, size, name, nullptr, 0);
        if (!doc)
        {
            throw std::runtime_error("could not load embedded schema");
        }

        parserCtx = xmlSchemaNewDocParserCtxt(doc);
        if (!parserCtx)
        {
            throw std::runtime_error("could not create parser context");
        }

        schema = xmlSchemaParse(parserCtx);
        if (!schema)
        {
            throw std::runtime_error("could not create schema parser");
        }

        validCtx = xmlSchemaNewValidCtxt(schema);
        if (!validCtx)
        {
            throw std::runtime_error("could not create validation context");
        }

        xmlSchemaSetValidOptions(validCtx, XML_SCHEMA_VAL_VC_I_CREATE);

        std::vector<std::string> errors;
        xmlSetStructuredErrorFunc(&errors, xml_error_handler);
        bool result = (xmlSchemaValidateDoc(validCtx, data.doc) == 0);
        xmlSetStructuredErrorFunc(nullptr, nullptr);

        if (!result)
        {
            std::ostringstream oss;
            for (const auto& line : errors)
            {
                oss << line << '\n';
            }
            throw std::runtime_error(oss.str());
        }

        xmlSchemaFreeValidCtxt(validCtx);
        xmlSchemaFree(schema);
        xmlSchemaFreeParserCtxt(parserCtx);
        xmlFreeDoc(doc);
    }
    catch (const std::exception&)
    {
        xmlSchemaFreeValidCtxt(validCtx);
        xmlSchemaFree(schema);
        xmlSchemaFreeParserCtxt(parserCtx);
        xmlFreeDoc(doc);
        throw;
    }
}
{% endif %}

inline xmlNodePtr get_child(
    xmlNodePtr parent,
    const char* name)
{
    for (auto node = xmlFirstElementChild(parent); node; node = xmlNextElementSibling(node))
    {
        if (xmlStrcmp(node->name, BAD_CAST name) == 0)
        {
            return node;
        }
    }
    return nullptr;
}

inline bool contains_key(
    const config_data_t& data,
    const char* key,
    config_options opts)
{
    if (!data.node)
    {
        return false;
    }

    const auto flags = opts.flags & (FLAG_XML_ATTRIBUTE | FLAG_XML_ELEMENT);

    if (flags == 0 || flags & FLAG_XML_ATTRIBUTE)
    {
        if (xmlHasProp(data.node, BAD_CAST key))
        {
            return true;
        }
    }

    if (flags == 0 || flags & FLAG_XML_ELEMENT)
    {
        if (get_child(data.node, key))
        {
            return true;
        }
    }

    return false;
}

inline config_data_t get_key(
    const config_data_t& data,
    const char* key,
    config_options opts)
{
    if (!data.node)
    {
        std::ostringstream msg;
        msg << "invalid node for key '" << key << "'";
        throw std::runtime_error(msg.str());
    }

    const auto flags = opts.flags & (FLAG_XML_ATTRIBUTE | FLAG_XML_ELEMENT);

    if (flags == 0 || flags & FLAG_XML_ATTRIBUTE)
    {
        auto prop = xmlGetProp(data.node, BAD_CAST key);
        if (prop)
        {
            return {prop};
        }
    }

    if (flags == 0 || flags & FLAG_XML_ELEMENT)
    {
        auto child = get_child(data.node, key);
        if (child)
        {
            return {child};
        }
    }

    std::ostringstream msg;
    msg << "element/attribute '" << key << "' does not exist in '" << data.node->name << "'";
    throw std::runtime_error(msg.str());
}

template<typename T>
inline void from_data(
    const config_data_t& data,
    T& value,
    config_options opts)
{
    const auto flags = opts.flags & (FLAG_XML_ATTRIBUTE | FLAG_XML_ELEMENT);

    if (flags == 0 || flags & FLAG_XML_ATTRIBUTE)
    {
        if (data.prop)
        {
            const auto* content = reinterpret_cast<const char*>(data.prop);
            value = config::from_string<T>(content);
            return;
        }
    }

    if (flags == 0 || flags & FLAG_XML_ELEMENT)
    {
        if (data.node)
        {
            xmlChar* content = xmlNodeGetContent(data.node);
            value = config::from_string<T>(reinterpret_cast<const char*>(content));
            xmlFree(content);
            return;
        }
    }
}

template<typename T>
inline void from_data(
    const config_data_t& data,
    T& value,
    int base,
    config_options opts)
{
    const auto flags = opts.flags & (FLAG_XML_ATTRIBUTE | FLAG_XML_ELEMENT);

    if (flags == 0 || flags & FLAG_XML_ATTRIBUTE)
    {
        if (data.prop)
        {
            const auto* content = reinterpret_cast<const char*>(data.prop);
            value = config::from_string<T>(content, base);
            return;
        }
    }

    if (flags == 0 || flags & FLAG_XML_ELEMENT)
    {
        if (data.node)
        {
            xmlChar* content = xmlNodeGetContent(data.node);
            value = config::from_string<T>(reinterpret_cast<const char*>(content), base);
            xmlFree(content);
            return;
        }
    }
}

template<typename T>
inline void from_data(
    const T& data,
    T& value,
    [[maybe_unused]] config_options opts)
{
    value = data;
}

template<typename T>
inline void from_data(
    const config_data_t& data,
    std::vector<T>& value,
    config_options opts)
{
    if (data.node)
    {
        for (auto node = xmlFirstElementChild(data.node); node; node = xmlNextElementSibling(node))
        {
            if (opts.elementName == nullptr || xmlStrcmp(node->name, BAD_CAST opts.elementName) == 0)
            {
                T tmp;
                from_data({node}, tmp, opts);
                value.push_back(tmp);
            }
        }
    }
}

template<typename K, typename V>
inline void from_data(
    const config_data_t& data,
    std::map<K,V>& value,
    config_options opts)
{
    if (data.node)
    {
        for (auto node = xmlFirstElementChild(data.node); node; node = xmlNextElementSibling(node))
        {
            if (opts.elementName == nullptr || xmlStrcmp(node->name, BAD_CAST opts.elementName) == 0)
            {
                auto child_key = get_child(node, "key");
                if (child_key == nullptr)
                {
                    throw std::runtime_error("dictionary entry contains no key"); // todo
                }
                K key;
                from_data({child_key}, key, opts);

                auto child_value = get_child(node, "value");
                if (child_value == nullptr)
                {
                    throw std::runtime_error("dictionary entry contains no value"); // todo
                }
                V val;
                from_data({child_value}, val, opts);

                value.insert(std::make_pair(key, val));
            }
        }
    }
}

template<typename T>
inline void get_mandatory_element(
    const config_data_t& data,
    const char* name,
    std::vector<T>& value,
    config_options opts)
{
    try
    {
        if (opts.flags & FLAG_XML_WRAPPED)
        {
            from_data(get_key(data, name {{- m.insert_fd_opts() -}}), value {{- m.insert_fd_opts() -}});
        }
        else
        {
            if (data.node)
            {
                for (auto node = xmlFirstElementChild(data.node); node; node = xmlNextElementSibling(node))
                {
                    if (name == nullptr || xmlStrcmp(node->name, BAD_CAST name) == 0)
                    {
                        T tmp;
                        from_data({node}, tmp {{- m.insert_fd_opts() -}});
                        value.push_back(tmp);
                    }
                }
            }
        }
    }
    catch (const std::exception& ex)
    {
        std::ostringstream oss;
        oss << "failed to retrieve element '" << name << "': " << ex.what();
        throw std::runtime_error(oss.str());
    }
}
{% endblock %}
