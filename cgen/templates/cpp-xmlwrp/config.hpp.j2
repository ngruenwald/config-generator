{%- import '_macros.j2' as m -%}

{%- macro insert_description(text) -%}
/// {{ text | default('') | trim | replace('\n', '\n/// ') }}
{%- endmacro -%}

{%- macro insert_optional_type(member, field) -%}
{%- if options['cpp'] and options['cpp']['use_optional'] | default(false) -%}
{%- if not member.required and member.type.default is none %}std::optional<{% endif -%}
{%- endif -%}
{{ m.type_name(field) }}
{%- if options['cpp'] and options['cpp']['use_optional'] | default(false) -%}
{%- if not member.required and member.type.default is none %}>{% endif -%}
{%- endif -%}
{%- endmacro -%}

{%- macro insert_optional_vector(member) -%}
{#-{%- if not member.required and not member.default %}std::optional<{% endif -%}-#}
std::vector<{{ m.type_name(member.type.item_type.name) }}>
{#-{%- if not member.required and not member.default %}>{% endif -%}-#}
{%- endmacro -%}

{#-
  Renders forward delcarations for types
  @param types         List of types [objects]
  @param unique_types  List of unique type names [strings]
-#}
{%- macro forward_declarations(types, unique_types) -%}
{%- for type in types -%}
{%- if type.type == 'object' and type.name in unique_types -%}
struct {{ m.type_case(type.name) }};
{% endif -%}
{%- endfor -%}
{%- endmacro -%}

{#-
  Renders a list of enums
  @param types         List of types [objects]
  @param unique_types  List of unique type names [strings]
-#}
{%- macro insert_enums(types, unique_types) -%}
{%- for type in types -%}
{%- if type.type == 'enum' and type.base_type == 'string' and type.name in unique_types -%}
{{ insert_enum(type) }}
{%- endif -%}
{%- endfor -%}
{%- endmacro -%}

{#-
  Renders an enum
  @param type  Enum type [object]
-#}
{%- macro insert_enum(type) -%}
{{ insert_description(type.description) }}
ENUMS(
    {{ m.type_case(type.name) }},
    ENUMARGS(
{%- for enum in type.enum -%}{{ m.enum_case(enum) }}{%- if not loop.last -%},{%- endif -%}{%- endfor -%}
),
    ENUMARGS(
{%- for enum in type.enum -%}"{{ enum }}"{%- if not loop.last -%},{%- endif -%}{%- endfor -%}
)
)
{% endmacro -%}

{#-
  Renders a list of structs
  @param types         List of types [objects]
  @param unique_types  List of unique type names [strings]
-#}
{%- macro insert_structs(types, unique_types) -%}
{%- for type in types -%}
{%- if type.type == 'object' and type.name in unique_types -%}
{{ insert_struct(type) }}
{% endif -%}
{%- endfor -%}
{%- endmacro -%}

{#-
  Renders a struct
  @param type  Struct type [object]
-#}
{%- macro insert_struct(type) -%}
{{ insert_description(type.description) }}
struct {{ m.type_case(type.name) }}
{
{%- filter indent(4) -%}
{{ insert_members(type.fields) }}
{% endfilter -%}
};
{% endmacro -%}

{#-
  Renders a list of struct members
-#}
{%- macro insert_members(members) -%}
{%- if members -%}
{%- for member in members -%}
{{ insert_member(member) }}
{% endfor -%}
{%- endif -%}
{%- endmacro -%}

{#-
  Renders a member of a struct
  @param member  Type [object]
-#}
{%- macro insert_member(member) %}
{{ insert_description(member.description) }}
{%- if member.type.type == 'object' %}
{%- if not member.type.name in unique_types -%}
{{ insert_struct(member) }}
{%- endif %}
struct {{ m.type_case(member.type.name) }} {{ m.value_case(member.name) }};
{%- elif member.type.type == 'array' or member.type.type == 'list' %}
{{ insert_optional_vector(member) }} {{ m.value_case(member.name) }};
{%- elif member.type.type == 'enum' %}
  {%- if member.type.base_type == 'string' %}
{{ insert_optional_type(member, member.type.name) }} {{ m.value_case(member.name) }}{{ default_value(member) }};
  {%- else %}
{{ insert_optional_type(member, member.type.base_type) }} {{ m.value_case(member.name) }}{{ default_value(member) }};
  {%- endif -%}
{%- else %}
{{ insert_optional_type(member, member.type.type) }} {{ m.value_case(member.name) }}{{ default_value(member) }};
{%- endif -%}
{%- endmacro -%}

{#-
-#}
{%- macro format_default_value(mt) -%}
{%-   if mt.type in ['string']            -%}"{{ mt.default }}"
{%- elif mt.type in ['char', 'character'] -%}'{{ mt.default }}'
{%- elif mt.type in ['bool', 'boolean']   -%}{{ 'true' if mt.default else 'false' }}
{%- elif mt.type in ['int', 'integer', 'number', 'uint', 'unsigned'] -%}{{ mt.default | base(mt.base) }}
{%- elif mt.type in ['enum'] -%}
  {%- if mt.base_type in ['string'] -%}{{ m.type_name(mt.name) }}::{{ m.enum_case(mt.default) }}
  {%- elif mt.base_type in ['int', 'integer', 'number', 'uint', 'unsigned'] -%}{{ mt.default | base(mt.base) }}
  {%- else -%}{{ mt.default }}
  {%- endif -%}
{%- else -%}{{ mt.default }}
{%- endif -%}
{%- endmacro -%}

{#-
  Renders the default value of a struct member
  @param member  Type [object]
-#}
{%- macro default_value(member) -%}
{%- if member.type.default is not none -%}
{{ '{' }}{{ format_default_value(member.type) }}{{ '}' }}
{%- endif -%}
{%- endmacro -%}

// This file has been generated. Do not modify.

#pragma once

#include <cstdint>
#include <memory>
{% if options['cpp'] and options['cpp']['use_optional'] | default(false) %}#include <optional>
{% endif -%}
#include <string>
#include <vector>

#include "enums.hpp"
{% if options['cpp'] and options['cpp']['namespaces'] | default([]) | length > 0 %}
{%- for namespace in options['cpp']['namespaces'] %}
namespace {{ namespace }} {
{%- endfor %}
{%- else %}
namespace config {
{%- endif %}
{% if types -%}
{# {{ forward_declarations(types, unique_types) }} #}
{{ insert_enums(types, unique_types) }}
{{ insert_structs(types, unique_types) }}
{%- endif -%}

{{ insert_struct(config) }}

/// Loads the configuration from file
/// @param[in] configPath Location of the configuration file
/// @returns Configuration structure via unique pointer
struct std::unique_ptr<Config> LoadConfig(
    const std::string& configPath);

/// Validates the configuration file against the internal schema
/// @param[in] configPath Location of the configuration file
/// @returns True if the the configuration is valid, otherwise False
bool ValidateConfig(
    const std::string& configPath);
{% if options['cpp'] and options['cpp']['namespaces'] | default([]) | length > 0 %}
{%- for namespace in options['cpp']['namespaces'] %}
} // namespace {{ namespace }}
{%- endfor %}
{%- else %}
} // namespace config
{%- endif %}

