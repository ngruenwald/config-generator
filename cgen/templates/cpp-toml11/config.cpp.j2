{%- set opt = {} -%}
{%- from "_options.j2" import set_options with context -%}
{{- set_options(opt) -}}
{%- extends "base_config.cpp.j2" -%}

{% block specific_includes %}
#include <map>
#include <string>
#include <vector>

#include <toml.hpp>
{% endblock %}

{% block specific_code %}
typedef toml::value config_data_t;

inline config_data_t load_file(
    const std::string& filepath)
{
    return toml::parse(filepath, toml::spec::v(1,1,0));
}
{% if opt.use_validate %}
inline void validate(
    const config_data_t& data)
{
}
{% endif %}
inline bool contains_key(
    const config_data_t& data,
    const char* key)
{
    return data.contains(key);
}

inline const config_data_t& get_key(
    const config_data_t& data,
    const char* key)
{
    return data.at(key);
}

template<typename T>
inline void from_data(
    const config_data_t& data,
    T& value)
{
    assert(false);
}

template<typename T>
inline void from_data(
    const config_data_t& data,
    T& value,
    int base)
{
    assert(false);
}

inline void from_data(
    const config_data_t& data,
    bool& value)
{
    value = data.as_boolean();
}

inline void from_data(
    const config_data_t& data,
    int& value)
{
    value = data.as_integer();
}

inline void from_data(
    const config_data_t& data,
    int& value,
    int base)
{
    value = config::from_string<int>(data.as_string(), base);
}

inline void from_data(
    const config_data_t& data,
    unsigned int& value)
{
    value = data.as_integer();
}

inline void from_data(
    const config_data_t& data,
    unsigned int& value,
    int base)
{
    value = config::from_string<unsigned int>(data.as_string(), base);
}

inline void from_data(
    const config_data_t& data,
    double& value)
{
    value = data.as_floating();
}

inline void from_data(
    const config_data_t& data,
    float& value)
{
    value = data.as_floating();
}

inline void from_data(
    const config_data_t& data,
    std::string& value)
{
    value = data.as_string();
}

template<typename T>
inline void from_data(
    const config_data_t& data,
    std::vector<T>& value)
{
    for (const auto& child : data.as_array())
    {
        T tmp;
        from_data(child, tmp);
        value.push_back(tmp);
    }
}

template<typename K, typename V>
inline void from_data(
    const config_data_t& data,
    std::map<K,V>& value)
{
    for (const auto& child : data.as_table())
    {
        auto key = config::from_string<K>(child.first);
        V val;
        from_data(child.second, val);
        value.insert(std::make_pair(key, val));
    }
}
{% endblock %}
