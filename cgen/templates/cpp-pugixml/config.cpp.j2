{%- import '_macros.j2' as m -%}

{#-
  Renders a list of load functions
  @param types         List of types [objects]
  @param unique_types  List of unique type names [strings]
-#}
{%- macro load_functions(types, unique_types) -%}
{%- if types -%}
{%- for type in types -%}
{%- if type.type == 'object' and type.name in unique_types %}
{{ load_function(type) }}
{% endif -%}
{%- endfor -%}
{%- endif -%}
{%- endmacro -%}

{%- macro load_function(type) -%}
static struct {{ m.type_case(type.name) }} Load{{ m.type_case(type.name) }}(
    const pugi::xml_node& node)
{
    struct {{ m.type_case(type.name) }} config;
{% filter indent(4) %}
{{ load_fields('config.', type.fields) }}
{%- endfilter %}
    return config;
}
{%- endmacro -%}

{%- macro load_fields(prefix, fields) -%}
{%- for field in fields -%}
{{ load_field(prefix, field) }}
{% endfor -%}
{%- endmacro -%}

{%- macro load_field(prefix, field) -%}
{% if field.required %}XML_MANDATORY({% else %}XML_OPTIONAL({% endif -%}
{{ prefix }}{{ m.value_case(field.name) }} =
{%- if field.type.type in ['object'] %} Load{{ m.type_case(field.type.name) }}(get_child(node, "{{ field.type.alias }}"))
{%- elif field.type.type in ['array', 'list'] %} load_array<{{ m.type_case(field.type.item_type.name) }}>(node, "{{ field.type.alias }}", Load{{ m.type_case(field.type.item_type.name) }})
{%- elif field.type.type in ['enum'] %}
  {%- if field.type.base_type in ['string'] %} load_enum<{{ m.type_case(field.type.name) }}>(node, "{{ field.type.alias }}")
  {%- else %} from_string<{{ m.type_name(field.type.base_type) }}>(get_attr(node, "{{ field.name }}").value(){% if field.type.base and field.type.base != 10 %}, {{ field.type.base }}{% endif %})
  {%- endif %}
{%- else %} from_string<{{ m.type_name(field.type.type) }}>(get_attr(node, "{{ field.name }}").value(){% if field.type.base and field.type.base != 10 %}, {{ field.type.base }}{% endif %})
{%- endif -%}
);
{%- endmacro -%}

#include <functional>
#include <iostream>

#include <pugixml.hpp>

#include "{{ options['output_prefix'] | default('') }}config.hpp"
#include "from_string.hpp"


#define XML_MANDATORY(x) try { x; } catch (...) { throw; }
#define XML_OPTIONAL(x)  try { x; } catch (...) { }

{% if options['cpp'] and options['cpp']['namespaces'] | default([]) | length > 0 %}
{%- for namespace in options['cpp']['namespaces'] %}
namespace {{ namespace }} {
{%- endfor %}
{%- else %}
namespace config {
{%- endif %}

static pugi::xml_node get_child(
    const pugi::xml_node& node,
    const char* name)
{
    auto child = node.child(name);

    if (!child)
    {
        std::ostringstream msg;
        msg << "element '" << name << "' does not exist in '" << node.name() << "'";
        throw std::runtime_error(msg.str());
    }

    return child;
}

static pugi::xml_attribute get_attr(
    const pugi::xml_node& node,
    const char* name)
{
    auto attr = node.attribute(name);

    if (!attr)
    {
        std::ostringstream msg;
        msg << "attribute '" << name << "' does not exist in '" << node.name() << "'";
        throw std::runtime_error(msg.str());
    }

    return attr;
}

template<typename E>
E load_enum(
    const pugi::xml_node& node,
    const char* attr)
{
    E e;
    if (!from_string(get_attr(node, attr).value(), e))
    {
        throw std::invalid_argument("invalid enum value");
    }
    return e;
}

template<typename T>
std::vector<T> load_array(
    const pugi::xml_node& node,
    const char* name,
    std::function<T(const pugi::xml_node&)> f)
{
    std::vector<T> v;
    for (const auto& child : node.child(name))
    {
        v.push_back(f(child));
    }
    return v;
}

{% if types -%}
{{ load_functions(types, unique_types) }}
{%- endif -%}
{%- if elements -%}
{{ load_functions(elements, unique_elements) }}
{%- endif -%}

struct std::unique_ptr<Config> LoadConfig(
    const std::string& configPath)
{
{%- if elements %}
    try
    {
        pugi::xml_document doc;
        auto result = doc.load_file(configPath.c_str());

        if (!result)
        {
            std::ostringstream msg;
            msg << "XML [" << configPath << "] parsed with errors, attr value: [" << doc.child("node").attribute("attr").value() << "]\n";
            msg << "Error description: " << result.description() << "\n";
            msg << "Error offset: " << result.offset << " (error at [..." << (configPath.c_str() + result.offset) << "]";
            throw std::runtime_error{msg.str()};
        }

        auto node = get_child(doc, "config");

        auto config = std::make_unique<struct Config>();

        {% filter indent(8) -%}
        {{ load_fields('config->', config.fields) }}
        {%- endfilter %}
        return config;
    }
    catch (const std::exception& ex)
    {
        throw;
    }
{%- endif %}

    return {};
}
{% if options['cpp'] and options['cpp']['namespaces'] | default([]) | length > 0 %}
{%- for namespace in options['cpp']['namespaces'] %}
} // namespace {{ namespace }}
{%- endfor %}
{%- else %}
} // namespace config
{%- endif %}

