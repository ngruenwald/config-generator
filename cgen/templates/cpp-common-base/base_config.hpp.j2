{%- import "_base_macros.j2" as m -%}

{%- macro insert_description(text) -%}
/// {{ text | default("") | trim | replace("\n", "\n/// ") }}
{%- endmacro -%}

{%- macro insert_optional_type(member, field) -%}
{%- if opt.use_optional -%}
{%- if not member.required and member.type.default is none %}std::optional<{% endif -%}
{%- endif -%}
{{ m.type_name(field) }}
{%- if opt.use_optional -%}
{%- if not member.required and member.type.default is none %}>{% endif -%}
{%- endif -%}
{%- endmacro -%}

{%- macro insert_optional_struct(member) -%}
{%- if opt.use_optional and not member.required -%}
std::optional<{{ m.type_case(member.type.name) }}> {{ m.value_case(member.name) }}
{%- else -%}
{{ m.type_case(member.type.name) }} {{ m.value_case(member.name) }}
{%- endif -%}
{%- endmacro -%}

{%- macro insert_optional_vector(member) -%}
{#-{%- if not member.required and not member.default %}std::optional<{% endif -%}-#}
std::vector<{{ m.type_name(m.get_type(member.type.item_type)) }}>
{#-{%- if not member.required and not member.default %}>{% endif -%}-#}
{%- endmacro -%}

{%- macro insert_optional_map(member) -%}
{#-{%- if not member.required and not member.default %}std::optional<{% endif -%}-#}
std::map<{{ m.type_name(m.get_type(member.type.key_type)) }}, {{ m.type_name(m.get_type(member.type.value_type)) }}>
{#-{%- if not member.required and not member.default %}>{% endif -%}-#}
{%- endmacro -%}

{#-
  Renders forward delcarations for types
  @param types         List of types [objects]
  @param unique_types  List of unique type names [strings]
-#}
{%- macro forward_declarations(types, unique_types) -%}
{%- for type in types -%}
{%- if type.type == "object" and type.name in unique_types -%}
struct {{ m.type_case(type.name) }};
{% endif -%}
{%- endfor -%}
{%- endmacro -%}

{#-
  Renders a list of enums
  @param types         List of types [objects]
  @param unique_types  List of unique type names [strings]
-#}
{%- macro insert_enums(types, unique_types) -%}
{%- for type in types -%}
{%- if type.type == "enum" and type.base_type == "string" and type.name in unique_types -%}
{{ insert_enum(type) }}
{% endif -%}
{%- endfor -%}
{%- endmacro -%}

{#-
  Renders an enum
  @param type  Enum type [object]
-#}
{%- macro insert_enum(type) -%}
{{ insert_description(type.description) }}
ENUMS(
    {{ m.type_case(type.name) }},
    ENUMARGS(
{%- for enum in type.enum -%}{{ m.enum_case(enum) }}{%- if not loop.last -%},{%- endif -%}{%- endfor -%}
),
    ENUMARGS(
{%- for enum in type.enum -%}"{{ enum }}"{%- if not loop.last -%},{%- endif -%}{%- endfor -%}
)
)
{% endmacro -%}

{#-
  Renders a list of types
  @param types         List of types [objects]
  @param unique_types  List of unique type names [strings]
-#}
{%- macro insert_types(types, unique_types) -%}
{%- for type in types %}
{%- if type.name in unique_types %}
{%- if type.type == "object" %}
{{ insert_struct(type) }}
{%- elif type.type == "array" %}
{{ insert_vector(type) }}
{%- elif type.type == "dict" %}
{{ insert_map(type) }}
{% endif -%}
{%- endif -%}
{%- endfor -%}
{%- endmacro -%}

{#-
  Renders a vector
  @param type  Array type [object]
-#}
{%- macro insert_vector(type) -%}
{{ insert_description(type.description) }}
typedef std::vector<{{ m.type_name(m.get_type(type.item_type)) }}> {{ m.type_case(type.name) }};
{% endmacro -%}

{#-
  Renders a map
  @param type  Dictionary type [object]
-#}
{%- macro insert_map(type) -%}
{{ insert_description(type.description) }}
typedef std::map<{{ m.type_name(m.get_type(type.key_type)) }}, {{ m.type_name(m.get_type(type.value_type)) }}> {{ m.type_case(type.name) }};
{% endmacro -%}

{#-
  Renders a struct
  @param type  Struct type [object]
-#}
{%- macro insert_struct(type) -%}
{{ insert_description(type.description) }}
struct {{ m.type_case(type.name) }}
{
{%- filter indent(4) -%}
{{ insert_members(type.fields) }}
{% endfilter -%}
};
{% endmacro -%}

{#-
  Renders a list of struct members
-#}
{%- macro insert_members(members) -%}
{%- if members -%}
{%- for member in members -%}
{{ insert_member(member) }}
{% endfor -%}
{%- endif -%}
{%- endmacro -%}

{#-
  Renders a member of a struct
  @param member  Type [object]
-#}
{%- macro insert_member(member) %}
{{ insert_description(member.description) }}
{%- if member.type.type == "object" %}
{%- if not member.type.name in unique_types -%}
{{ insert_struct(member) }}
{%- endif %}
{{ insert_optional_struct(member) }};
{%- elif member.type.type == "array" %}
{{ insert_optional_vector(member) }} {{ m.value_case(member.name) }}{{ default_value(member) }};
{%- elif member.type.type == "dict" %}
{{ insert_optional_map(member) }} {{ m.value_case(member.name) }};
{%- elif member.type.type == "enum" %}
  {%- if member.type.base_type == "string" %}
{{ insert_optional_type(member, member.type.name) }} {{ m.value_case(member.name) }}{{ default_value(member) }};
  {%- else %}
{{ insert_optional_type(member, member.type.base_type) }} {{ m.value_case(member.name) }}{{ default_value(member) }};
  {%- endif -%}
{%- else %}
{{ insert_optional_type(member, member.type.type) }} {{ m.value_case(member.name) }}{{ default_value(member) }};
{%- endif -%}
{%- endmacro -%}

{#-
-#}

{%- macro _format_default_value(mt_type, mt_base_type, mt_default, mt_base) -%}
{%-   if mt_type in ["string"] -%}"{{ mt_default }}"
{%- elif mt_type in ["char", "character"] -%}'{{ mt_default }}'
{%- elif mt_type in ["bool"] -%}{{ "true" if mt_default else "false" }}
{%- elif mt_type in ["int", "uint"] -%}{{ mt_default | base(mt_base) }}
{%- elif mt_type in ["enum"] -%}
  {%- if mt_base_type in ["string"] -%}{{ m.type_name(mt.name) }}::{{ m.enum_case(mt_default) }}
  {%- elif mt_base_type in ["int", "uint"] -%}{{ mt_default | base(mt_base) }}
  {%- else -%}{{ mt_default }}
  {%- endif -%}
{%- elif mt_type in ["array"] -%}
  {%- for entry in mt_default -%}
    "{{ entry }}"{% if not loop.last %}, {% endif %}
  {%- endfor %}
{%- else -%}{{ mt_default }}
{%- endif -%}
{%- endmacro -%}

{%- macro format_default_value(mt) -%}
{%-   if mt.type in ["array"] -%}
  {%- for entry in mt.default -%}
    {#- TODO... "complex" types? -#}
    {{ _format_default_value(m.get_type(mt.item_type), "", entry, "") }}{% if not loop.last %}, {% endif %}
  {%- endfor %}
{%- elif mt.type in ["dict"] -%}
  {#- TODO -#}
{%- else -%}
  {{ _format_default_value(mt.type, mt.base_type, mt.default, mt.base) }}
{%- endif -%}
{%- endmacro -%}

{#-
  Renders the default value of a struct member
  @param member  Type [object]
-#}
{%- macro default_value(member) -%}
{%- if member.type.default is not none -%}
{{ "{" }}{{ format_default_value(member.type) }}{{ "}" }}
{%- endif -%}
{%- endmacro -%}

{#- SOF -#}
// This file has been generated. Do not modify.

#pragma once

#include <cstdint>
#include <map>
#include <memory>
{% if opt.use_optional -%}
#include <optional>
{%- endif %}
{% if opt.use_printer -%}
#include <sstream>
{%- endif %}
#include <string>
#include <vector>

#include "enums.hpp"
{% for namespace in opt.namespaces %}
namespace {{ namespace }} {
{%- endfor %}
{% if types %}
{{ insert_enums(types, unique_types) }}
{{ insert_types(types, unique_types) }}
{%- endif -%}

{{ insert_struct(config) }}
{% if opt.use_printer -%}
std::ostream& operator<<(
    std::ostream& os,
    const {{ m.type_case(config.name) }}& config);
{%- endif %}

/// Loads the configuration from file
/// @param[in] configPath Location of the configuration file
/// @returns Configuration structure via unique pointer
std::unique_ptr<Config> LoadConfig(
    const std::string& configPath);

{%- for namespace in opt.namespaces %}
} // namespace {{ namespace }}
{%- endfor %}
