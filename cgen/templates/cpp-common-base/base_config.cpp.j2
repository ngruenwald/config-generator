{%- block options %}{% endblock -%}
{%- import "_base_macros.j2" as m with context -%}

{#-
  Renders a list of load functions
  @param types         List of types [objects]
  @param unique_types  List of unique type names [strings]
-#}
{%- macro load_functions(types, unique_types) -%}
{%- for type in types | default([]) -%}
{%- if type.type == "object" and type.name in unique_types %}
{{ load_function(type) }}
{% endif -%}
{%- endfor -%}
{%- endmacro -%}

{%- macro load_function(type) -%}
static void from_data(
    const config_data_t& data,
    {{ m.type_case(type.name) }}& value
    {{- m.insert_fn_opts() -}})
{
{%- for field in type.fields %}
{%- if field.required %}
    get_mandatory_element(data, "{{ field.type.alias }}", value.{{ m.value_case(field.name) }} {{- m.insert_base(field) -}} {{- m.insert_opts(field) -}});
{%- else %}
    get_optional_element(data, "{{ field.type.alias }}", value.{{ m.value_case(field.name) }} {{- m.insert_base(field) -}} {{- m.insert_opts(field) -}});
{%- endif %}
{%- endfor %}
}
{%- endmacro -%}

{#-
  Renders a list of enum load functions
  @param types         List of types [objects]
  @param unique_types  List of unique type names [strings]
-#}
{%- macro enum_load_functions(types, unique_types) -%}
{%- for type in types | default([]) -%}
{%- if type.type == "enum" and type.base_type == "string" and type.name in unique_types %}
static void from_data(
    const config_data_t& data,
    {{ m.type_case(type.name) }}& value
    {{- m.insert_fn_opts() -}})
{
    enum_from_data(data, value);
}
{% endif -%}
{%- endfor -%}
{%- endmacro -%}

{#-
  Renders a list of print functions
  @param types         List of types [objects]
  @param unique_types  List of unique type names [strings]
-#}
{%- macro print_functions(types, unique_types) -%}
{%- if types -%}
{%- for type in types -%}
{%- if type.type == 'object' and type.name in unique_types %}
{{ print_function(type) }}
{% endif -%}
{%- endfor -%}
{%- endif -%}
{%- endmacro -%}
{%- macro print_function(type) -%}
template<>
void print<{{ m.type_case(type.name) }}>(
    std::ostream& os,
    const {{ m.type_case(type.name) }}& config,
    int indentLevel,
    const char* prefix)
{
    if (prefix != nullptr && strlen(prefix) > 0)
    {
        os << std::setw(indentLevel) << "" << prefix << "\n";
    }
{%- filter indent(4) -%}
{{ print_fields('config.', type.fields) }}
{%- endfilter %}
}
{%- endmacro -%}
{%- macro print_fields(prefix, fields) -%}
{% for field in fields %}
{{ print_field(prefix, field) }}
{%- endfor -%}
{%- endmacro -%}
{%- macro print_field(prefix, field) -%}
{%- if field.type.type in ['object'] %}print(os, {{ prefix }}{{ m.value_case(field.name) }}, indentLevel + 2, "{{ field.name }}: ");
{%- elif field.type.type in ['array'] %}print(os, {{ prefix }}{{ m.value_case(field.name) }}, indentLevel + 2, "{{ field.name }}");
{%- elif field.type.type in ['dict'] %}print(os, {{ prefix }}{{ m.value_case(field.name) }}, indentLevel + 2, "{{ field.name }}");
{%- else %}
    {%- if field.type.base and field.type.base != 10 %}print(os, {{ prefix }}{{ m.value_case(field.name) }}, {{ field.type.base }}, indentLevel + 2, "{{ field.name }}: ");
    {%- else %}print(os, {{ prefix }}{{ m.value_case(field.name) }}, indentLevel + 2, "{{ field.name }}: ");
    {%- endif -%}
{%- endif -%}
{%- endmacro -%}

// This file has been generated. Do not modify.

#include <functional>
{% if opt.use_printer -%}
#include <iomanip>
{%- endif %}
#include <iostream>
{% block specific_includes %}
{% endblock %}
#include "{{ opt.output_prefix }}config.hpp"
{%- block specific_code_no_namespace %}{% endblock %}
{% for namespace in opt.namespaces %}
namespace {{ namespace }} {
{%- endfor %}

#include "from_string.hpp"

//
// specific
//
{% block specific_code %}
{% endblock %}
//
// common
//

template<typename T>
inline void get_mandatory_element(
    const config_data_t& data,
    const char* name,
    T& value
    {{- m.insert_fn_opts() -}})
{
    try
    {
        from_data(get_key(data, name {{- m.insert_fd_opts() -}}), value {{- m.insert_fd_opts() -}});
    }
    catch (const std::exception& ex)
    {
        std::ostringstream oss;
        oss << "failed to retrieve element '" << name << "': " << ex.what();
        throw std::runtime_error(oss.str());
    }
}

template<typename T>
inline void get_optional_element(
    const config_data_t& data,
    const char* name,
    T& value
    {{- m.insert_fn_opts() -}})
{
    if (contains_key(data, name {{- m.insert_fd_opts() -}}))
    {
        get_mandatory_element(data, name, value {{- m.insert_fd_opts() -}});
    }
}
{% if opt.use_optional %}
template<typename T>
inline void get_optional_element(
    const config_data_t& data,
    const char* name,
    std::optional<T>& value
    {{- m.insert_fn_opts() -}})
{
    if (contains_key(data, name {{- m.insert_fd_opts() -}}))
    {
        T tmp;
        get_mandatory_element(data, name, tmp {{- m.insert_fd_opts() -}});
        value = tmp;
    }
}
{% endif %}
template<typename T>
inline void get_mandatory_element(
    const config_data_t& data,
    const char* name,
    T& value,
    int base
    {{- m.insert_fn_opts() -}})
{
    try
    {
        from_data(get_key(data, name {{- m.insert_fd_opts() -}}), value, base {{- m.insert_fd_opts() -}});
    }
    catch (const std::exception& ex)
    {
        std::ostringstream oss;
        oss << "failed to retrieve element '" << name << "': " << ex.what();
        throw std::runtime_error(oss.str());
    }
}

template<typename T>
inline void get_optional_element(
    const config_data_t& data,
    const char* name,
    T& value,
    int base
    {{- m.insert_fn_opts() -}})
{
    if (contains_key(data, name {{- m.insert_fd_opts() -}}))
    {
        get_mandatory_element(data, name, value, base {{- m.insert_fd_opts() -}});
    }
}
{% if opt.use_optional %}
template<typename T>
inline void get_optional_element(
    const config_data_t& data,
    const char* name,
    std::optional<T>& value,
    int base
    {{- m.insert_fn_opts() -}})
{
    if (contains_key(data, name {{- m.insert_fd_opts() -}}))
    {
        T tmp;
        get_mandatory_element(data, name, tmp, base {{- m.insert_fd_opts() -}});
        value = tmp;
    }
}
{% endif %}
template<typename T>
inline void get_optional_element(
    const config_data_t& data,
    const char* name,
    std::vector<T>& value
    {{- m.insert_fn_opts() -}})
{
    if (contains_key(data, name {{- m.insert_fd_opts() -}}))
    {
        get_mandatory_element(data, name, value {{- m.insert_fd_opts() -}});
    }
}

template<typename K, typename V>
inline void get_optional_element(
    const config_data_t& data,
    const char* name,
    std::map<K,V>& value
    {{- m.insert_fn_opts() -}})
{
    if (contains_key(data, name {{- m.insert_fd_opts() -}}))
    {
        get_mandatory_element(data, name, value {{- m.insert_fd_opts() -}});
    }
}

template<typename T>
inline void enum_from_data(
    const config_data_t& data,
    T& value)
{
    std::string tmp;
    from_data(data, tmp {%- if opt.requires_opts %}, {}{% endif -%});
    if (!from_string(tmp.c_str(), value))
    {
        throw std::invalid_argument("invalid enum value");
    }
}

{% if opt.use_printer -%}
template<typename T>
void print(
    std::ostream& os,
    const T& config,
    int indentLevel,
    const char* prefix)
{
    os << std::setw(indentLevel) << "" << prefix << config << "\n";
}

template<typename T>
void print(
    std::ostream& os,
    const std::vector<T>& config,
    int indentLevel,
    const char* prefix)
{
    os << std::setw(indentLevel) << "" << prefix << ':';
    if (config.size() == 0)
    {
        os << " <empty>\n";
    }
    else
    {
        os << '\n';
        for (size_t n = 0; n < config.size(); n++)
        {
            std::ostringstream oss;
            oss << '[' << n << "]: ";
            print(os, config[n], indentLevel + 2, oss.str().c_str());
        }
    }
}

template<typename K, typename V>
void print(
    std::ostream& os,
    const std::map<K,V>& config,
    int indentLevel,
    const char* prefix)
{
    os << std::setw(indentLevel) << "" << prefix << ':';
    if (config.size() == 0)
    {
        os << " <empty>\n";
    }
    else
    {
        os << '\n';
        size_t n = 0;
        for (const auto& [key, value] : config)
        {
            os << std::setw(indentLevel + 2) << "" << '[' << n << "]: " << '\n';
            print(os, key, indentLevel + 4, "key: ");
            print(os, value, indentLevel + 4, "value: ");
            n += 1;
        }
    }
}

{%- if opt.use_optional %}

template<typename T>
void print(
    std::ostream& os,
    const std::optional<T>& config,
    int indentLevel,
    const char* prefix)
{
    if (!config)
    {
        return;
    }
    print(os, config.value(), indentLevel, prefix);
}

{% endif %}

template<>
void print<bool>(
    std::ostream& os,
    const bool& config,
    int indentLevel,
    const char* prefix)
{
    os << std::setw(indentLevel) << "" << prefix << std::boolalpha << config << "\n";
}

template<>
void print<std::string>(
    std::ostream& os,
    const std::string& config,
    int indentLevel,
    const char* prefix)
{
    os << std::setw(indentLevel) << "" << prefix << '"' << config << '"' << '\n';
}

template<typename T>
void print(
    std::ostream& os,
    T value,
    int base,
    int indentLevel,
    const char* prefix)
{
    os << std::setw(indentLevel) << "" << prefix;
    switch (base)
    {
        case 8:
            os << "0" << std::oct << value;
            break;
        case 16:
            os << "0x" << std::hex << std::uppercase << static_cast<int>(value);
            break;
        default:
            os << value;
            break;
    }
    os << std::dec << "\n";
}

{%- if opt.use_optional %}

template<typename T>
void print(
    std::ostream& os,
    std::optional<T> value,
    int base,
    int indentLevel,
    const char* prefix)
{
    if (!value)
    {
        return;
    }
    print(os, value.value(), base, indentLevel, prefix);
}

{% endif -%}
{%- endif %}

//
// custom
//
{% if types -%}
{{ enum_load_functions(types, unique_types) -}}
{{ load_functions(types, unique_types) }}
{%- endif -%}
{%- if elements -%}
{{ load_functions(elements, unique_elements) }}
{%- endif %}
{% if opt.use_printer -%}
{%- if types -%}
{{ print_functions(types, unique_types) }}
{%- endif -%}
{%- if elements -%}
{{ print_functions(elements, unique_elements) }}
{%- endif %}

std::ostream& operator<<(
    std::ostream& os,
    const {{ m.type_case(config.name) }}& config)
{
    constexpr int indentLevel = 0;
    {% filter indent(4) -%}
    {{ print_fields('config.', config.fields) }}
    {%- endfilter %}
    return os;
}
{%- endif %}

static void from_data(
    const config_data_t& data,
    {{ m.type_case(config.name) }}& value
    {{- m.insert_fn_opts() -}})
{
{%- for field in config.fields %}
{%- if field.required %}
    get_mandatory_element(data, "{{ field.type.alias }}", value.{{ m.value_case(field.name) }} {{- m.insert_opts(field) -}});
{%- else %}
    get_optional_element(data, "{{ field.type.alias }}", value.{{ m.value_case(field.name) }} {{- m.insert_opts(field) -}});
{%- endif %}
{%- endfor %}
}

struct std::unique_ptr<{{ m.type_case(config.name) }}> LoadConfig(
    const std::string& configPath)
{
{%- if elements %}
    try
    {
        auto data = load_file(configPath);
        {% if opt.use_validate %}
        validate(data);
        {% endif %}
        auto config = std::make_unique<struct {{ m.type_case(config.name) }}>();
        from_data(data, *config {%- if opt.requires_opts %}, {}{% endif %});

        return config;
    }
    catch (const std::exception& ex)
    {
        throw;
    }
{%- endif %}

    return {};
}

{%- if opt.use_validate %}

bool ValidateConfig(
    const std::string& configPath,
    std::ostream& os)
{
    try
    {
        auto data = load_file(configPath);
        validate(data);
        return true;
    }
    catch (const std::exception& ex)
    {
        os << ex.what() << "\n\n";
    }

    return false;
}
{%- endif %}
{% for namespace in opt.namespaces %}
} // namespace {{ namespace }}
{%- endfor %}
