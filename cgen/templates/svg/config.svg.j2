{%- macro get_column_width(column, default) -%}
{%-   if options['svg']['columns'][column]['width']  -%}{{ options['svg']['columns'][column]['width'] }}
{%- elif options['svg']['columns'][column]['length'] -%}{{ (options['svg']['columns'][column]['length'] | int + 1) * 5 }}
{%- else -%}{{ default }}
{%- endif -%}
{%- endmacro -%}

{%- set global_vars = namespace(
      uniquifier = 0,
      object_color_index = 0,
      object_colors = [
        '#C6E2FF', '#D5E8D4', '#AFCBFF', '#B4CFD3', '#A3E4D7', '#D5E8D4',

        '#FFD1DC', '#FFB3BA', '#A3E4D7', '#D9C9E3', '#B4CFD3',
        '#C8A2C8', '#A0B0C9', '#D5E8D4', '#B9A7D6', '#F3C5C5',
        '#F7CAC9', '#C0A3C9', '#FDFD96', '#C2D0E3', '#B1C7D0',
        '#E1C1E4', '#B39EB5', '#C1C8E4', '#F9CB9C', '#D2B9D1',
        '#C4B6D1', '#EBD4CB', '#D0EFB1', '#C6E2FF', '#B5C2D6',
        '#FBE7C6', '#A1B1C1', '#D0C1E0', '#F8B88B', '#F4BFBF',
        '#D1B1E0', '#E5D9F2', '#B6C6D1', '#D1C7F0', '#A3B5D6',
        '#B9A1D4', '#D3E0EB', '#B8A1D1', '#C2B3D1', '#C2D0E3',
        '#D3E0EB', '#A8E6CF', '#D1B2E6', '#FFDFBA', '#B9A1D4'
      ],
      font_color = '#000000',
      border_color = '#000000',
      border_width = 0.5,
      indent = 5,
      line_height = 12,
      bold_font = 'font-size:8px;line-height:1.25;font-family:Courier New;font-weight:bold',
      normal_font = 'font-size:8px;line-height:1.25;font-family:Courier New;font-weight:normal',
      array_color = '#dfdfdf',
      dict_color = '#dfdfdf',
      enum_color = '#dfdfdf',
      simple_color = '#f0f0f0',
      compact_enum = options['svg']['compact_enum'] | default(True),
      xml = options['svg']['xml'] | default(False),
      col_name_width = get_column_width('title', 150),
      col_type_width = get_column_width('type', 150),
      col_default_width = get_column_width('default', 150),
      col_usage_width = get_column_width('usage', 20),
      col_description_width = get_column_width('description', 150),
      col_name_length = options['svg']['columns']['title']['length'] | default(0),
      col_type_length = options['svg']['columns']['type']['length'] | default(0),
      col_default_length = options['svg']['columns']['default']['length'] | default(0),
      col_usage_length = options['svg']['columns']['usage']['length'] | default(0),
      col_description_length = options['svg']['columns']['description']['length'] | default(0),
      image_width = options['svg']['image']['width'] | default(0),
    )
-%}

{%- if global_vars.image_width == 0 -%}
  {%- set global_vars.image_width =
        global_vars.col_name_width | int +
        global_vars.col_type_width | int +
        global_vars.col_default_width | int +
        global_vars.col_usage_width | int +
        global_vars.col_description_width | int
  -%}
{%- endif -%}

{#-
  Format the name of a field type

  @param field the field
  @returns the formatted type name
-#}
{%- macro format_type_name(field) -%}
{%-   if field.type.type == 'array'  -%}
  {{ '[…]' }}
  {%-   if field.type.minsize and field.type.maxsize %}  ({{ field.type.minsize }}..{{ field.type.maxsize }})
  {%- elif field.type.minsize %}  ({{ field.type.minsize }}..*)
  {%- elif field.type.maxsize %}  (0..{{ field.type.maxsize }})
  {%- else %} {#- (0..*) -#}
  {%- endif -%}
{%- elif field.type.type == 'dict'   -%} {{ '{ : }' }}
{%- elif field.type.type == 'enum'   -%} {{ field.type.name + ' [' + field.type.base_type + ']' }}
{%- elif field.type.type == 'object' -%} {{ '' }}

{%- elif field.type.type in ['int', 'uint', 'float'] -%} {#- NOTE: float has no base -#}
  {{ field.type.type }}
  {%-   if field.type.minv and field.type.maxv %} ({{ field.type.minv }}..{{ field.type.maxv }})
  {%- elif field.type.minv %} (≥ {{ field.type.minv }})
  {%- elif field.type.maxv %} (≥ {{ field.type.maxv }})
  {%- endif -%}
  {%- if field.type.base | default(10) != 10 -%}
    {%-   if field.type.base == 2  %} [bin]
    {%- elif field.type.base == 8  %} [oct]
    {%- elif field.type.base == 16 %} [hex]
    {%- else %} [base {{ field.type.base }}]
    {%- endif -%}
  {%- endif -%}
{%- elif field.type.type in ['string'] -%}
  {{ field.type.type }}
  {%-   if field.type.min and field.type.max %} ({{ field.type.min }} ≥ len ≤ {{ field.type.max }})
  {%- elif field.type.min %} (len ≥ {{ field.type.min }})
  {%- elif field.type.max %} (len ≤ {{ field.type.max }})
  {%- endif -%}
{%- else -%} {{ field.type.type }}
{%- endif -%}
{%- endmacro -%}

{%- macro format_default(field) -%}
{#-
  {%- if not field.type.default -%}
  {%- elif field.type.type in ['int', 'uint', 'float'] -%} {{ field.type.default }}
  {%- elif field.type.type in ['bool'] %} {{ field.type.default }}
  {%- elif field.type.type in%}
-#}
{%- if field.type.default %}{{ field.type.default }}{% endif -%}
{%- endmacro -%}

{%- macro limit_string(text, len) -%}
{%- if len == 0 -%}{{ text }}
{%- elif text | length <= len -%}{{ text }}
{%- else %}{{ text[0:len] }}…
{%- endif -%}
{%- endmacro -%}

{#-
  Create an options structure

  @param field the field to create the options for
  @param vars mutable variables
  @param opts_in input options
  @param indent indentation of the box
  @returns the new options structure
-#}
{%- macro create_opts(field, vars, opts_in, indent) -%}
{%- set opts = {
      'x': vars['x'] + indent | int,
      'y': vars['y'],
      'xo': 0,
      'yo': 0,
      'indent': indent if indent else global_vars.indent,
      'line_height': global_vars.line_height,
      'box': {
        'width': opts_in['box']['width'] | int - indent,
        'height': get_box_height(opts_in, field, field.name),
        'color': get_box_color_ex(field),
        'border_color': global_vars.border_color,
        'border_width': global_vars.border_width
      },
      'columns': [
        {
          'name': opts_in['columns'][0]['name'],
          'width': opts_in['columns'][0]['width'] | int - indent,
          'text': limit_string(field.name | default(''), opts_in['columns'][0]['length'] | default(0)),
          'length': opts_in['columns'][0]['length'] | default(0)
        },
        {
          'name': opts_in['columns'][1]['name'],
          'width': opts_in['columns'][1]['width'],
          'text': limit_string(format_type_name(field), opts_in['columns'][1]['length'] | default(0)),
          'length': opts_in['columns'][1]['length'] | default(0)
        },
        {
          'name': opts_in['columns'][2]['name'],
          'width': opts_in['columns'][2]['width'],
          'text': limit_string(format_default(field), opts_in['columns'][2]['length'] | default(0)),
          'length': opts_in['columns'][2]['length'] | default(0)
        },
        {
          'name': opts_in['columns'][3]['name'],
          'width': opts_in['columns'][3]['width'],
          'text': '' if field.required is none else ('M' if field.required else 'O'),
          'length': opts_in['columns'][3]['length'] | default(0)
        },
        {
          'name': opts_in['columns'][4]['name'],
          'width': opts_in['columns'][4]['width'],
          'text': limit_string(field.description | default(''), opts_in['columns'][4]['length'] | default(0)),
          'length': opts_in['columns'][4]['length'] | default(0)
        }
      ]
    }
-%}
{{ opts }}
{%- endmacro -%}

{#-
  Returns one of the configured object_colors, based on the current index.

  @modifies 'global_vars.object_color_index'
-#}
{%- macro get_box_color() -%}
{{ global_vars.object_colors[global_vars.object_color_index] }}
{%- set global_vars.object_color_index = global_vars.object_color_index + 1 -%}
{%- if global_vars.object_color_index >= global_vars.object_colors | length -%}
{%- set global_vars.object_color_index = 0 -%}
{%- endif -%}
{%- endmacro -%}

{%- macro get_box_color_ex(field) -%}
  {%-   if field.type.type == 'array'  -%} {{ global_vars.array_color | default(get_box_color()) }}
  {%- elif field.type.type == 'dict'   -%} {{ global_vars.dict_color | default(get_box_color()) }}
  {%- elif field.type.type == 'enum'   -%} {{ global_vars.enum_color | default(get_box_color()) }}
  {%- elif field.type.type == 'object' -%} {{ get_box_color() }}
  {%- else                             -%} {{ global_vars.simple_color }}
  {%- endif -%}
{%- endmacro -%}

{#-
  Returns the name of the given type.
-#}
{%- macro get_type_name(type) -%}
{%- if type.type in ['object'] -%}{{ type.name }}
{%- else -%}{{ type.type }}
{%- endif -%}
{%- endmacro -%}

{#-
  Creates a unique id based on the given parts and the global uniquifier.

  @param parts list of strings
  @modifies global_vars.uniquifier
-#}
{%- macro create_id(parts) -%}
{%- set global_vars.uniquifier = global_vars.uniquifier + 1 -%}
{%- for part in parts %}{{ part }}-{% endfor %}{{ global_vars.uniquifier }}
{%- endmacro -%}

{#-
  Calculates the x offset of the given column

  @param opts input options
  @param offset fixed offset
  @param index column index
-#}
{%- macro offset_x(opts, offset, index) -%}
  {%- set vars = { 'offset': (offset + index + 1) } -%}
  {%- for column in opts.columns -%}
    {%- if loop.index0 < index -%}
      {%- if vars.update({'offset': (vars['offset'] + column.width | int)}) %}{% endif -%}
    {%- endif -%}
  {%- endfor -%}
{{ vars['offset'] }}
{%- endmacro -%}

{#-
  Escape reserved XML characters

  @param text input text
-#}
{%- macro sanitize_text(text) -%}
{#- {{ text | replace('&', '&amp;') | replace('<', '&lt;') | replace('>', '&gt;') | replace('\'', '&apos;') }} -#}
{{ text | escape }}
{%- endmacro -%}

{#-
  Calculates the height of a box

  @param opts render options
  @param field the field
-#}
{%- macro get_box_height(opts, field, trace_id) -%}
{#-{{- (trace_id + ' : ' + field | pprint) | debug -}}-#}
  {%- set vars = { 'h': opts.line_height} -%}
  {%-   if field.type.type in ['array']  -%} {{ get_box_height_array(field, opts, vars, trace_id) }}
  {%- elif field.type.type in ['dict']   -%} {{ get_box_height_dict(field, opts, vars, trace_id) }}
  {%- elif field.type.type in ['enum']   -%} {{ get_box_height_enum(field, opts, vars, trace_id) }}
  {%- elif field.type.type in ['object'] -%} {{ get_box_height_object(field, opts, vars, trace_id) }}
  {%- endif -%}
{{ vars['h'] }}
{%- endmacro -%}

{%- macro get_box_height_array(field, opts, vars, trace_id) -%}
  {%- if field.type.item_type.type in ['array', 'dict', 'object'] -%}
    {%- set field_item = {'type': field.type.item_type} -%}
    {%- set _ = vars.update({'h': vars['h'] | int + get_box_height(opts, field_item, trace_id) | int}) -%}
  {%- else -%}
    {%- set _ = vars.update({'h': vars['h'] | int + opts.line_height | int}) -%}
  {%- endif -%}
  {%- if global_vars.xml -%}
    {%- set _ = vars.update({'h': vars['h'] | int - opts.line_height | int}) -%}
  {%- endif -%}
{%- endmacro -%}

{%- macro get_box_height_dict(field, opts, vars, trace_id) -%}
  {%- if field.type.key_type.type in ['array', 'dict', 'object'] -%}
    {%- set field_key = {'type': field.type.key_type} -%}
    {%- set _ = vars.update({'h': vars['h'] + get_box_height(opts, field_key, trace_id) | int}) -%}
  {%- else -%}
    {%- set _ = vars.update({'h': vars['h'] + opts.line_height | int}) -%}
  {%- endif -%}
  {%- if field.type.value_type.type in ['array', 'dict', 'object'] -%}
    {%- set field_value = {'type': field.type.value_type}%}
    {%- set _ = vars.update({'h': vars['h'] + get_box_height(opts, field_value, trace_id) | int}) -%}
  {%- else -%}
    {%- set _ = vars.update({'h': vars['h'] + opts.line_height | int}) -%}
  {%- endif -%}
{%- endmacro -%}

{%- macro get_box_height_enum(field, opts, vars, trace_id) -%}
  {%- if global_vars.compact_enum -%}
    {%- set _ = vars.update({'h': vars['h'] + opts.line_height | int}) -%}
  {%- else -%}
    {%- set enum_count = field.type.enum | length %}
    {%- set _ = vars.update({'h': vars['h'] + (opts.line_height * (enum_count if enum_count else 1)) | int}) -%}
  {%- endif -%}
{%- endmacro -%}

{%- macro get_box_height_object(field, opts, vars, trace_id) -%}
  {%- for child in field.type.fields -%}
    {%- set _ = vars.update({'h': vars['h'] + get_box_height(opts, child, trace_id) | int}) -%}
  {%- endfor -%}
{%- endmacro -%}

{#-
  Renders an element

  @param elm the element to render
  @param opts render options
-#}
{%- macro render_element(elm, opts) -%}
{%- set vars = {'x': opts.x, 'y': opts.y} %}
<g id="{{ create_id([elm.name, 'element']) }}">
{% filter indent(2) %}
{%- if opts['no_box'] | default(False) -%}
  {#- undo indent -#}
{%- else -%}
<rect
  x="{{ vars['x'] }}"
  y="{{ vars['y'] }}"
  width="{{ opts.box.width }}"
  height="{{ opts.box.height }}"
  id="{{ create_id([elm.name, 'box']) }}"
  style="fill:{{ opts.box.color }};stroke:{{ opts.box.border_color }};stroke-width:{{ opts.box.border_width }}"
  />
{% for column in opts.columns -%}
{{ render_textblock(elm, opts, column, loop.index0) }}
{% endfor -%}
{%- endif -%}

{%-   if elm.type.type == 'array'  -%} {{ render_element_array(elm, vars, opts) }}
{%- elif elm.type.type == 'dict'   -%} {{ render_element_dict(elm, vars, opts) }}
{%- elif elm.type.type == 'enum'   -%} {{ render_element_enum(elm, vars, opts) }}
{%- elif elm.type.type == 'object' -%} {{ render_element_object(elm, vars, opts) }}
{%- endif -%}

{%- endfilter -%}
{%- if opts.update({'xo': vars['x']}) -%}{%- endif -%}
{%- if opts.update({'yo': vars['y']}) -%}{%- endif -%}
</g>
{% endmacro -%}

{#-
  Renders a textblock

  @param elm the parent element
  @param opts render options
  @param column the column to render
  @param index the column index
-#}
{%- macro render_textblock(elm, opts, column, index) -%}
{#-<g id="{{ create_id([elm.name, column.name]) }}">
  <rect
    x="{{ offset_x(opts, opts.x + 0, index) }}"
    y="{{ opts.y + 1 }}"
    width="{{ column.width }}"
    height="{{ opts.line_height }}"
    id="{{ create_id([elm.name, column.name, 'box']) }}"
    style="fill:#00ff00"
    /> -#}
<text
  x="{{ offset_x(opts, opts.x + opts.indent | int + opts.text_indent | default(0) | int, index) }}"
  y="{{ opts.y + 8 }}"
  id="{{ create_id([elm.name, column.name, 'text']) }}"
  fill="{{ opts.font_color | default(global_vars.font_color) }}"
  style="{{ opts.font | default(global_vars.normal_font) }}"
  >
  {{ sanitize_text(column.text) }}
</text>
{#-</g>-#}
{%- endmacro -%}

{%- macro render_field(elm, field, vars, opts) -%}
  {%-   if field.type.type in ['array']   -%} {{ render_field_array(elm, opts, field, vars)  }} {%- if vars.update({'y': opts.yo}) %}{% endif %}
  {%- elif field.type.type in ['dict']    -%} {{ render_field_dict(elm, opts, field, vars)   }} {%- if vars.update({'y': opts.yo}) %}{% endif %}
  {%- elif field.type.type in ['enum']    -%} {{ render_field_enum(elm, opts, field, vars)   }} {%- if vars.update({'y': opts.yo}) %}{% endif %}
  {%- elif field.type.type in ['object']  -%} {{ render_field_object(elm, opts, field, vars) }} {%- if vars.update({'y': opts.yo}) %}{% endif %}
  {%- else -%}                                {{ render_field_simple(elm, opts, field, vars) }}
  {%- endif %}
{%- endmacro -%}

{%- macro render_element_array(elm, vars, opts) -%}
  {%- set field_item = {'name': elm.type.item_name, 'type': elm.type.item_type, 'required': None} -%}
  {%- if global_vars.xml -%}
    {%- if vars.update({'no_box': True}) -%}{%- endif -%}
  {%- else -%}
    {%- if vars.update({'y': (vars['y'] + opts.line_height | int)}) -%}{# insert 'item' box #}{%- endif -%}
  {%- endif -%}
{{ render_field(elm, field_item, vars, opts) }}
{%- endmacro -%}

{%- macro render_element_dict(elm, vars, opts) -%}
  {%- set field_key = {'name': 'key', 'type': elm.type.key_type, 'required': True} -%}
  {%- if vars.update({'y': (vars['y'] + opts.line_height | int)}) -%}{# insert 'key' box #}{%- endif -%}
{{ render_field(elm, field_key, vars, opts) }}
  {%- set field_value = {'name': 'value', 'type': elm.type.value_type, 'required': True} -%}
  {%- if vars.update({'y': (vars['y'] + opts.line_height | int)}) -%}{# insert 'value' box #}{%- endif -%}
{{ render_field(elm, field_value, vars, opts) }}
{%- endmacro -%}

{%- macro render_element_enum(elm, vars, opts) -%}
{%- if global_vars.compact_enum -%}
  {%- set ve = {'enumerations': ''} -%}
  {%- for enum in elm.type.enum -%}
    {%- set _= ve.update({'enumerations': ve['enumerations'] + enum | string}) -%}
    {%- if not loop.last -%}
      {%- set _ = ve.update({'enumerations': ve['enumerations'] + ' / '}) -%}
    {%- endif -%}
  {%- endfor -%}
  {%- set field_enum = {'name': ve['enumerations'], 'type': '', 'description': '', 'required': None} -%}
  {%- if vars.update({'y': (vars['y'] + opts.line_height | int)}) -%}{%- endif -%}
{{ render_field(elm, field_enum, vars, opts) }}
{%- else -%}
  {% for enum in elm.type.enum %}
    {%- set field_enum = {'name': enum, 'type': '', 'description': '', 'required': None} -%}
    {%- if vars.update({'y': (vars['y'] + opts.line_height | int)}) -%}{%- endif -%}
{{ render_field(elm, field_enum, vars, opts) }}
  {% endfor %}
{%- endif -%}
{%- endmacro -%}

{%- macro render_element_object(elm, vars, opts) -%}
  {% for field in elm.type.fields %}
    {%- if vars.update({'y': (vars['y'] + opts.line_height | int)}) -%}{%- endif -%}
    {{ render_field(elm, field, vars, opts) }}
  {% endfor %}
{%- endmacro -%}

{#-
  Renders a field of type array

  @param parent the parent element
  @param opts render options
  @param field the field to render
  @param vars input/output variables
-#}
{%- macro render_field_array(parent, opts, field, vars) -%}
{%- set fopts = create_opts(field, vars, opts, opts['indent'] | default(global_vars.indent)) | to_dict -%}
<g id="{{ create_id([parent.name, field.name, 'element']) }}">
{%- filter indent(2) -%}
{{ render_element(field, fopts) }}
{%- endfilter -%}
</g>
{%- if opts.update({'xo': fopts.xo}) -%}{%- endif -%}
{%- if opts.update({'yo': fopts.yo}) -%}{%- endif -%}
{%- endmacro -%}

{#-
  Renders a field of type dictionary

  @param parent the parent element
  @param opts render options
  @param field the field to render
  @param vars input/output variables
-#}
{%- macro render_field_dict(parent, opts, field, vars) -%}
{%- set fopts = create_opts(field, vars, opts, opts['indent'] | default(global_vars.indent)) | to_dict -%}
<g id="{{ create_id([parent.name, field.name, 'element']) }}">
{%- filter indent(2) -%}
{{ render_element(field, fopts) }}
{%- endfilter -%}
</g>
{%- if opts.update({'xo': fopts.xo}) -%}{%- endif -%}
{%- if opts.update({'yo': fopts.yo}) -%}{%- endif -%}
{%- endmacro -%}

{#-
  Renders a field of type enum

  @param parent the parent element
  @param opts render options
  @param field the field to render
  @param vars input/output variables
-#}
{%- macro render_field_enum(parent, opts, field, vars) -%}
{%- set fopts = create_opts(field, vars, opts, opts['indent'] | default(global_vars.indent)) | to_dict -%}
<g id="{{ create_id([parent.name, field.name, 'element']) }}">
{%- filter indent(2) -%}
{{ render_element(field, fopts) }}
{%- endfilter -%}
</g>
{%- if opts.update({'xo': fopts.xo}) -%}{%- endif -%}
{%- if opts.update({'yo': fopts.yo}) -%}{%- endif -%}
{%- endmacro -%}

{#-
  Renders a field of type object

  @param parent the parent element
  @param opts render options
  @param field the field to render
  @param vars input/output variables
-#}
{%- macro render_field_object(parent, opts, field, vars) -%}
{%- set fopts = create_opts(field, vars, opts, opts['indent'] | default(global_vars.indent)) | to_dict -%}
{%- set _ = fopts.update({'no_box': vars['no_box'] | default(False)}) -%}
<g id="{{ create_id([parent.name, field.name, 'element']) }}">
{%- filter indent(2) -%}
{{ render_element(field, fopts) }}
{%- endfilter -%}
</g>
{%- if opts.update({'xo': fopts.xo}) -%}{%- endif -%}
{%- if opts.update({'yo': fopts.yo}) -%}{%- endif -%}
{%- endmacro -%}

{#-
  Renders a simple field

  @param parent the parent element
  @param opts render options
  @param field the field to render
  @param vars input/output variables
-#}
{%- macro render_field_simple(parent, opts, field, vars) -%}
<g id="{{ create_id([parent.name, field.name, 'element']) }}">
{%- filter indent(2) -%}
{{ render_element(field, create_opts(field, vars, opts, opts['indent'] | default(global_vars.indent)) | to_dict) }}
{%- endfilter -%}
</g>
{%- endmacro -%}


{#-
  Main element

  @param object the config object
-#}
{%- macro main_element(object) -%}

  {%- set element = {
        'name': 'svg-title',
        'type': {
          'type': 'object',
          'fields': [
            {
              'name': 'config',
              'type': object,
              'required': True
            }
          ],
          'required': True
        }
      }
  -%}

  {%- set opts = {
    'x': 0,
    'y': 0,
    'xo': 0,
    'yo': 0,
    'indent': 0,
    'text_indent': global_vars.indent,
    'box': {
      'width': global_vars.image_width,
      'height': 0,
      'color': '#ffffff',
      'border_color': global_vars.border_color,
      'border_width': global_vars.border_width,
    },
    'columns': [
      { 'name': 'title',       'width': global_vars.col_name_width | default(150), 'text': 'Element', 'length': global_vars.col_name_length | default(0) },
      { 'name': 'type',        'width': global_vars.col_type_width | default(150), 'text': 'Type', 'length': global_vars.col_type_length | default(0) },
      { 'name': 'unknown',     'width': global_vars.col_default_width | default(100), 'text': 'Default', 'length': global_vars.col_default_length | default(0) },
      { 'name': 'usage',       'width': global_vars.col_usage_width | default(20), 'text': 'Use', 'length': global_vars.col_usage_length | default(0) },
      { 'name': 'description', 'width': global_vars.col_description_width | default(150), 'text': 'Description', 'length': global_vars.col_description_length | default(0) },
    ],
    'line_height': global_vars.line_height,
    'font': global_vars.bold_font
  }
  -%}

  {%- set _ = opts['box'].update({'height': get_box_height(opts, element, '42') | int + opts.line_height | int}) -%}

  {{- render_element(element, opts) -}}

{%- endmacro -%}

<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg xmlns="http://www.w3.org/2000/svg" id="config" style="background-color:white">
{% filter indent(2) %}
{{ main_element(config) }}
{% endfilter %}
</svg>
