{%- set opt = {} -%}
{%- from "_options.j2" import set_options with context -%}
{{- set_options(opt) -}}
{%- extends "base_config.cpp.j2" -%}

{% block specific_includes %}
#include <map>
#include <string>
#include <vector>

#include <yaml-cpp/yaml.h>
{% endblock %}

{% block specific_code %}
typedef YAML::Node config_data_t;

inline config_data_t load_file(
    const std::string& filepath)
{
    return YAML::LoadFile(filepath);
}
{% if opt.use_validate %}
inline void validate(
    const config_data_t& data)
{
}
{% endif %}
inline bool contains_key(
    const config_data_t& data,
    const char* key,
    [[maybe_unused]] config_options opts)
{
    try
    {
        if (data[key])
        {
            return true;
        }
    }
    catch (...)
    {
    }

    return false;
}

inline config_data_t get_key(
    const config_data_t& data,
    const char* key,
    [[maybe_unused]] config_options opts)
{
    return data[key];
}

template<typename T>
inline void from_data(
    const config_data_t& data,
    T& value,
    [[maybe_unused]] config_options opts)
{
    value = data.as<T>();
}

template<typename T>
inline void from_data(
    const T& data,
    T& value,
    [[maybe_unused]] config_options opts)
{
    value = data;
}

template<typename T>
inline void from_data(
    const config_data_t& data,
    std::vector<T>& value,
    config_options opts)
{
    if (data.Type() == YAML::NodeType::Sequence)
    {
        for (std::size_t n = 0; n < data.size(); n++)
        {
            T tmp;
            from_data(data[n], tmp, opts);
            value.push_back(tmp);
        }
    }
}

template<typename K, typename V>
inline void from_data(
    const config_data_t& data,
    std::map<K,V>& value,
    [[maybe_unused]] config_options opts)
{
    if (data.Type() == YAML::NodeType::Map)
    {
        for (YAML::const_iterator it = data.begin(); it != data.end(); ++it)
        {
            K key;
            from_data(it->first, key, opts);
            V val;
            from_data(it->second, val, opts);
            value.insert(std::make_pair(key, val));
        }
    }
}
{% endblock %}
