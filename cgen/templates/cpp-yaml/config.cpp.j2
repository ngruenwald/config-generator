{%- import '_macros.j2' as m -%}

{#-
  Renders forward declarations for load functions
  @param types         List of types [objects]
  @param unique_types  List of unique type names [strings]
-#}
{%- macro forward_declarations(types, unique_types) -%}
{%- for type in types -%}
{%- if type.type == 'object' and type.name in unique_types -%}
struct {{ m.type_case(type.name) }} Load{{ m.type_case(type.name) }}(const YAML::Node& node);
{% endif -%}
{%- endfor -%}
{%- endmacro -%}

{#-
  Renders a list of load functions
  @param types         List of types [objects]
  @param unique_types  List of unique type names [strings]
-#}
{%- macro load_functions(types, unique_types) -%}
{%- if types -%}
{%- for type in types -%}
{%- if type.type == 'object' and type.name in unique_types %}
{{ load_function(type) }}
{% endif -%}
{%- endfor -%}
{%- endif -%}
{%- endmacro -%}

{%- macro load_function(type) -%}
static struct {{ m.type_case(type.name) }} Load{{ m.type_case(type.name) }}(
    const YAML::Node& node)
{
    struct {{ m.type_case(type.name) }} config;
{% filter indent(4) %}
{{ load_fields('config.', type.fields) }}
{%- endfilter %}
    return config;
}
{%- endmacro -%}

{%- macro load_fields(prefix, fields) -%}
{%- for field in fields -%}
{{ load_field(prefix, field) }}
{% endfor -%}
{%- endmacro -%}

{%- macro load_field(prefix, field) -%}
{% if field.required %}YAML_MANDATORY(({% else %}YAML_OPTIONAL(({% endif -%}
{{ prefix }}{{ m.value_case(field.name) }} =
{%- if field.type.type in ['object'] %} Load{{ m.type_case(field.type.name) }}(node["{{ field.type.alias }}"])
{%- elif field.type.type in ['array', 'list'] %} load_array<{{ m.type_name(m.get_type(field.type.item_type)) }}>(node["{{ field.type.alias }}"], Load{{ m.type_case(m.get_type(field.type.item_type)) }})
{%- elif field.type.type in ['dict', 'dictionary', 'map'] %} load_dict<{{ m.type_name(m.get_type(field.type.key_type)) }}, {{ m.type_name(m.get_type(field.type.value_type)) }}>(node["{{ field.type.alias }}"], "item", Load{{ m.type_case(m.get_type(field.type.key_type)) }}, Load{{ m.type_case(m.get_type(field.type.value_type)) }})
{%- elif field.type.type in ['enum'] %}
  {%- if field.type.base_type in ['string'] %} load_enum<{{ m.type_case(field.type.name) }}>(node, "{{ field.type.alias }}")
  {%- else %} config::from_string<{{ m.type_name(field.type.base_type) }}>(node["{{ field.name }}"].as<std::string>(){% if field.type.base and field.type.base != 10 %}, {{ field.type.base }}{% endif %})
  {%- endif %}
{%- else %} config::from_string<{{ m.type_name(field.type.type) }}>(node["{{ field.name }}"].as<std::string>(){% if field.type.base and field.type.base != 10 %}, {{ field.type.base }}{% endif %})
{%- endif -%}
));
{%- endmacro -%}

// This file has been generated. Do not modify.

#include <cassert>
#include <functional>
#include <iostream>

#include <yaml-cpp/yaml.h>

#include "{{ options['output_prefix'] | default('') }}config.hpp"


#define YAML_MANDATORY(x) try { x; } catch (...) { throw; }
#define YAML_OPTIONAL(x)  try { x; } catch (...) { }

{% if options['cpp'] and options['cpp']['namespaces'] | default([]) | length > 0 %}
{%- for namespace in options['cpp']['namespaces'] %}
namespace {{ namespace }} {
{%- endfor %}
{%- else %}
namespace config {
{%- endif %}

#include "from_string.hpp"

template<typename E>
E load_enum(
    const YAML::Node& node,
    const char* attr)
{
    E e;
    if (!config::from_string(node[attr].as<std::string>().c_str(), e))
    {
        throw std::invalid_argument("invalid enum value");
    }
    return e;
}

template<typename T>
std::vector<T> load_array(
    const YAML::Node& node,
    std::function<T(const YAML::Node&)> f)
{
    std::vector<T> v;
    if (node.Type() == YAML::NodeType::Sequence)
    {
        for (std::size_t i = 0; i < node.size(); i++)
        {
            v.push_back(f(node[i]));
        }
    }
    return v;
}

template<typename K, typename V>
std::map<K,V> load_dict(
    const YAML::Node& node,
    const char* name,
    std::function<K(const YAML::Node&)> fk,
    std::function<V(const YAML::Node&)> fv)
{
    std::map<K,V> m;
    if (node.Type() == YAML::NodeType::Map)
    {
        for (YAML::const_iterator it = node.begin(); it != node.end(); ++it)
        {
            m.insert(std::make_pair(fk(it->first), fv(it->second)));
        }
    }
    return m;
}

inline int LoadInt(const YAML::Node& node) { return node.as<int>(); }
inline float LoadFloat(const YAML::Node& node) { return node.as<float>(); }
inline double LoadDouble(const YAML::Node& node) { return node.as<double>(); }
inline bool LoadBool(const YAML::Node& node) { return node.as<bool>(); }
inline std::string LoadString(const YAML::Node& node) { return node.as<std::string>(); }

// TODO: implement standard types

{% if types -%}
{{ load_functions(types, unique_types) }}
{%- endif -%}
{%- if elements -%}
{{ load_functions(elements, unique_elements) }}
{%- endif -%}

std::unique_ptr<Config> LoadConfig(
    const std::string& configPath)
{
{%- if elements %}
    try
    {
        auto node = YAML::LoadFile(configPath);

        auto config = std::make_unique<struct Config>();

        {% filter indent(8) -%}
        {{ load_fields('config->', config.fields) }}
        {%- endfilter %}
        return config;
    }
    catch (const std::exception& ex)
    {
        throw;
    }
{%- endif %}

    return {};
}
{% if options['cpp'] and options['cpp']['namespaces'] | default([]) | length > 0 %}
{%- for namespace in options['cpp']['namespaces'] %}
} // namespace {{ namespace }}
{%- endfor %}
{%- else %}
} // namespace config
{%- endif %}

